% pop_AutoBatch(EEG,Record) - This function takes information for EEG's history and makes a batch able script. 
% How to Use: Load a file Into EEGLAB. When ready press "start recording".
% Then peform the operation you want in EEGLAB. When finsihed press "Stop
% recording". This wil pull up a menu of all the operation you have done.
% Remove and Move the processes in the order desired. Then click "Save and
% Open Script". This will pull up a new create batch script with the
% operation you have choosen and create a folder named "0_Pre" and
% "0_Post". Place the ".set" files into in the "0_Pre" folder and run
% script! you processed files will be located in the "0_Post". Please send
% me feedback. Thank you for using this script. 
%
% Usage:
%   >>  pop_AutoBatch(EEG,Record);
%
% Inputs:
%   EEG     - Input dataset.
%   Record  - check it running record steps.
%    
% Author: Matthew Phillip Gunn 
%
% See also: 
%   eeglab , inputgui , supergui, pop_MoveButton, pop_RemoveButton, pop_SaveNopen

% Copyright (C) 2022  Matthew Gunn, Southern Illinois University Carbondale, matthewpgunn@gmail.com
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice,
% this list of conditions and the following disclaimer.
%
% 2. Redistributions in binary form must reproduce the above copyright notice,
% this list of conditions and the following disclaimer in the documentation
% and/or other materials provided with the distribution.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
% THE POSSIBILITY OF SUCH DAMAGE.

function [EEG com] = pop_AutoBatch(EEG,Record)
%  Starting_EEGH = [];
%  New_EEGH = eegh;
if exist('Record')
    userdata = get(get(gca,'Parent'),'userdata');
    close();
    if isempty(userdata.Starting_EEGH)
        Starting_EEGH = [];
        New_EEGH = [];
    else
        Starting_EEGH = userdata.Starting_EEGH;
        New_EEGH = userdata.New_EEGH;
    end    
else
    Starting_EEGH = [];
    New_EEGH = [];
end

%Starting Format
New_EEGH = string(New_EEGH);
AllProcesses = cell(1,(size(New_EEGH,2)- size(Starting_EEGH,2)));
for i1=1:(size(New_EEGH,2)- size(Starting_EEGH,2))
    AllProcesses{1,i1} = New_EEGH{1,i1};
end
AllProcesses = flip(AllProcesses);
% New Layout
CreateUIu= {};CreateUIg= {};TempidxN = {};Operation  = {};TempUIGeom = {};
OrderTrackerUI = {};

%Create Button Idx
if ~isempty(AllProcesses)
for CreateUIn=1:size(AllProcesses,2)
    TempUIGeom={};
    %Get Processes Name
    k0 = strfind(AllProcesses{1,CreateUIn},'=');
    k1 = strfind(AllProcesses{1,CreateUIn},'(');
    Operation{end+1,1}  = AllProcesses{1,CreateUIn}; %Operation
    if ~isempty(k0) && ~isempty(k1)
        temp = AllProcesses{1,CreateUIn};
        ProcessHolder = temp(1,k0+2:k1-1);
    end  
    % Header Process
    TempidxN{end+1,1} = strcat('UI_idxFun_',string(CreateUIn));     
    OrderTrackerUI{end+1,1} = CreateUIn;
    % Buttons Below Header
    TempidxN{end+1,1} = strcat('UI_idxDow_',string(CreateUIn));
    OrderTrackerUI{end+1,1} = CreateUIn;
    TempidxN{end+1,1} = strcat('UI_idxRem_',string(CreateUIn));
    OrderTrackerUI{end+1,1} = CreateUIn;
    TempidxN{end+1,1} = strcat('UI_idxUpB_',string(CreateUIn));
    OrderTrackerUI{end+1,1} = CreateUIn;
%     TempidxN{end+1,1} = strcat('UI_idxFig_',string(CreateUIn));
%     OrderTrackerUI{end+1,1} = CreateUIn;  

    TempUIGeom{1,end+1} = 1;
    TempUIGeom{1,end+1} = [ .7 .7 .7];
    
 %   TempUIGeom{1,end+1} = [ .7 .7 .7 .7];  
    TempButton1 = ...
        {{...
        'Style', 'pushbutton', 'string', ProcessHolder,   'fontweight', 'bold' , ...
        'tag', strcat('UI_idxFun_',string(CreateUIn)), 'callback', ['pop_functionsettings(gca,gco)']...
        }...
        };
%      TempButton2 = ...
%         {{...
%         'Style', 'pushbutton', 'string', 'Down',    'tag', strcat('UI_idxDow_',string(CreateUIn))...
%         'callback', ['pop_MoveButton(gca,gco)'] , ...
%         }...
%         {...
%         'Style', 'pushbutton', 'string', 'Remove',  'tag', strcat('UI_idxRem_',string(CreateUIn))...
%         'callback', ['pop_RemoveButton(gca,gco)'] , ...
%         }...
%         {...
%         'Style', 'pushbutton', 'string', 'Up',      'tag', strcat('UI_idxUpB_',string(CreateUIn))...
%         'callback', ['pop_MoveButton(gca,gco)'] , ...
%         }...
%         {...
%         'Style', 'pushbutton', 'string', 'Make Figure',      'tag', strcat('UI_idxFig_',string(CreateUIn))...
%         'callback', ['pop_ABFigure(EEG, gca)'] , ...
%         }...
%         };
     TempButton2 = ...
        {{...
        'Style', 'pushbutton', 'string', 'Down',    'tag', strcat('UI_idxDow_',string(CreateUIn))...
        'callback', ['pop_MoveButton(gca,gco)'] , ...
        }...
        {...
        'Style', 'pushbutton', 'string', 'Remove',  'tag', strcat('UI_idxRem_',string(CreateUIn))...
        'callback', ['pop_RemoveButton(gca,gco)'] , ...
        }...
        {...
        'Style', 'pushbutton', 'string', 'Up',      'tag', strcat('UI_idxUpB_',string(CreateUIn))...
        'callback', ['pop_MoveButton(gca,gco)'] , ...
        }...
        };

    CreateUIu = {CreateUIu{:},TempButton1{:},TempButton2{:}};
    CreateUIg = {CreateUIg{:},TempUIGeom{:}};
    
end
% Create Achors
end
Ti = sprintf('Auto Batch Script');
ButtonSection = {...
    { 'Style', 'text', 'string', ''}...
    { 'Style', 'text', 'string', ''}...
    { 'Style', 'text', 'string', ''}...
    };
StartAndStopRecorder = {...
    { 'Style', 'pushbutton', 'string', 'Start Recording',  'callback', ['userdata.Starting_EEGH =ALLCOM;set(get(gca,''Parent''), ''userdata'', userdata);']}...
    { 'Style', 'pushbutton', 'string', 'Stop Recording',   'callback', ['userdata.New_EEGH = ALLCOM; set(get(gca,''Parent''), ''userdata'', userdata);pop_AutoBatch(EEG,1)']}...
    };
geometry =  {...
    [ 1 .5 .5] ...
    [1]...
    [ 0.7 1 0.7] ...
    [1]...
    CreateUIg{:}...
    [ 1 ] ...
    [ 1 ] ...
    [ 1 ] ...
    [ 0.7 0.7] ...
    [ .5 ] ...
    [1]
    }; 

uilist   = {....
    { 'Style', 'text', 'string', Ti, 'fontweight', 'bold' },{},{}, ...
    { 'Style', 'text', 'string', 'Suggestions Remove: "pop_newset", "eeg_store", "pop_loadset", and "pop_saveset" and "eeg_checkset"' }, ...
    ButtonSection{:},...
    {},...
    CreateUIu{:},...
    {},...
    {},...
    {},...
    StartAndStopRecorder{:},...
    { 'Style', 'pushbutton', 'string', 'Open EEGlab WITHOUT wiping memory',  'callback', ['eeglab redraw'] } ...
    { 'Style', 'pushbutton', 'string', 'Save and Open AutoBatch Script',  'callback', ['pop_SaveNopen(gca,gco)'] } ...
    };

userdata.OrderName = TempidxN;
userdata.OrderNum = OrderTrackerUI;
userdata.UpDownButtonRun = 0;
if exist('Record')
    userdata.Operation = Operation;
else
    userdata.Operation = {};    
end
[results userdata returnmode] = inputgui('geometry', geometry, 'uilist', uilist, 'helpcom', ...
    'pophelp(''pop_AutoBatch'');', 'title', 'Script Creation -- pop_AutoBatch()', ...
    'userdata', userdata);

